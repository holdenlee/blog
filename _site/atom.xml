<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mental Wilderness</title>
    <link href="http://holdenlee.github.io/blog/atom.xml" rel="self" />
    <link href="http://holdenlee.github.io/blog" />
    <id>http://holdenlee.github.io/blog/atom.xml</id>
    <author>
        <name>Holden Lee</name>
        <email>oldheneel@gmail.com</email>
    </author>
    <updated>2017-05-01T00:00:00Z</updated>
    <entry>
    <title>Thoughts and links, 3-4/2017</title>
    <link href="http://holdenlee.github.io/blog/posts/monthly_summaries/2017-4.html" />
    <id>http://holdenlee.github.io/blog/posts/monthly_summaries/2017-4.html</id>
    <published>2017-05-01T00:00:00Z</published>
    <updated>2017-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Thoughts and links, 3-4/2017</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2017-05-01 
          , Modified: 2017-05-01 
	</p>
      
       <p>Tags: <a href="/tags/links.html">links</a></p> 
    </div>
    
  </div>
  <!--/div-->

  

  <div class="blog-main">
    <p>See all the links for <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232017-3">March</a> and <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232017-4">April</a>. (See <a href="4-16.html">April 2016’s post</a> for an explanation of the organization.) Here are some highlights.</p>
<h2 id="books">Books</h2>
<ul>
<li><a href="https://www.goodreads.com/book/show/28202.The_Metaphysical_Club">The Metaphysical Club, Louis Menand</a>: Discusses the evolution of American philosophy in the 19th and early 20th century in response to the Civil War and scientific progress (ex. Darwin’s theory of evolution), through the story of 4 American philosphers (William James, Oliver Wendell Holmes, Charles Peirce, and John Dewey). <a href="https://workflowy.com/s/4qkO9xWz4M#/9ccd29dd9117">Notes</a></li>
<li><a href="https://www.goodreads.com/book/show/10165606-introduction-to-classical-chinese-philosophy">Introduction to classical Chinese philosophy, Bryan Van Norden</a>, <a href="https://workflowy.com/s/wL3CyEXpHY#/45fec88080b3">notes</a></li>
<li><a href="http://www.rifters.com/real/Blindsight.htm">Blindsight, Peter Watts</a> asks the question: what if the correlation of consciousness and intelligence on Earth is just an accident - and the universe is filled with intelligent but nonconscious beings? It makes a strong (scientific, non-dualistic) argument for the possibility that intelligence need not be correlated with consciousness.</li>
<li><a href="https://www.goodreads.com/book/show/3896708-china">China: A History, John Keay</a>: in progress, <a href="https://workflowy.com/s/wL3CyEXpHY#/0ad51ae14b7f">notes</a></li>
</ul>
<h2 id="comics">Comics</h2>
<p>A free trial of <a href="https://www.comixology.com/">Comixology</a> was very much worth it. Some of my picks:</p>
<ul>
<li><a href="https://www.comixology.com/Trees-Vol-1/digital-comic/194144?ref=c2VhcmNoL2luZGV4L2Rlc2t0b3Avc2xpZGVyTGlzdC90b3BSZXN1bHRzU2xpZGVy">Trees</a></li>
<li><a href="https://www.comixology.com/reMIND-Vol-1/digital-comic/197610?ref=c2VhcmNoL2luZGV4L2Rlc2t0b3Avc2xpZGVyTGlzdC90b3BSZXN1bHRzU2xpZGVy">reMIND</a></li>
<li><a href="https://www.comixology.com/Adventure-Time-Vol-1/digital-comic/47066?ref=c2VhcmNoL2luZGV4L2Rlc2t0b3Avc2xpZGVyTGlzdC90b3BSZXN1bHRzU2xpZGVy">Adventure time</a>
<ul>
<li><a href="https://www.comixology.com/Adventure-Time-Fionna-Cake/comics-series/9458?ref=c2VhcmNoL2luZGV4L2Rlc2t0b3Avc2xpZGVyTGlzdC9zZXJpZXNTbGlkZXI">Fiona and Cake</a></li>
</ul></li>
<li><a href="https://www.comixology.com/Pretty-Deadly/comics-series/11683?ref=c2l0ZS9saXN0L2Rlc2t0b3AvbGlzdC9HZW5yZUxpc3Q">Pretty deadly</a></li>
</ul>
<h2 id="podcast-picks">Podcast Picks</h2>
<ul>
<li>The Allusionist
<ul>
<li><a href="http://www.theallusionist.org/allusionist/please">33 Please</a>: Differences in the usage of “please” in the US and UK.</li>
<li>50-51 Under the Covers <a href="http://www.theallusionist.org/allusionist/covers-i">1</a> and <a href="http://www.theallusionist.org/allusionist/covers-ii">2</a>: On romance novels and the language of sex.</li>
<li><a href="https://www.theallusionist.org/allusionist/authority">54 The Authority</a>: The role of the dictionary.</li>
</ul></li>
<li><a href="http://www.radiolab.org/story/radiolab-extra-henrietta-lacks/">Radiolab Extra: Henrietta Lacks</a>: On one woman’s medically miraculous cancer cells.</li>
<li>Imaginary Worlds: <a href="https://soundcloud.com/emolinsky/beyond-the-iron-curtain">Beyond the Iron Curtain</a>: Science fiction from the Soviet Union tends to be more subtle.</li>
<li>The Memory Palace: <a href="http://thememorypalace.us/2017/02/amok/">105, Amok</a>: when animals escape the Central Park Zoo.</li>
<li>On being: <a href="https://onbeing.org/https://onbeing.org/programs/richard-rohr-living-in-deep-time/">Richard Rohr — Living in Deep Time</a> (<a href="http://scrible.com/s/22FSA">highlights</a>): “Chronos is chronological time, time as duration, one moment after another, and that’s what most of us think of as time… But there was another word in Greek, kairos. And kairos was deep time. It was when you have those moments where you say, ‘Oh my god, this is it.’”</li>
<li>Philosophy Bites: <a href="http://philosophybites.com/2017/03/andy-clark-on-the-extended-mind.html">Andy Clark on The Extended Mind</a></li>
<li>Quanta: <a href="https://www.quantamagazine.org/20170202-math-and-the-best-life-francis-su-interview/">To live your best life, do mathematics</a>: Interview with Francis Su.</li>
<li>TED radio hour
<ul>
<li><a href="http://www.npr.org/programs/ted-radio-hour/514152888/the-spirit-of-inquiry?showDate=2017-02-24">The spirit of inquiry</a></li>
<li><a href="http://www.npr.org/programs/ted-radio-hour/519264798/decisions-decisions-decisions?showDate=2017-03-10">Decisions</a></li>
</ul></li>
<li>The Truth
<ul>
<li><a href="http://www.thetruthpodcast.com/story/2017/3/8/miracle-on-the-l-train">Miracle on the L train</a></li>
</ul></li>
<li>This American Life:
<ul>
<li><a href="https://www.thisamericanlife.org/radio-archives/episode/611/vague-and-confused">611 Vague and confused</a> including a story on who gets to stay on a private Hawaiian island.</li>
<li><a href="https://www.thisamericanlife.org/radio-archives/episode/614/the-other-mr-president">614 The other Mr. President</a> (Vladimir Putin)</li>
</ul></li>
<li>99 percent invisible
<ul>
<li><a href="http://99percentinvisible.org/episode/state-sanctuary-part-2/">250 State (Sanctuary Part 2)</a>: The role of churches as sanctuary in the refugee crisis.</li>
<li><a href="http://99percentinvisible.org/episode/containers-ships-tugs-port/">254 Containers</a>: The change brought by the invention of containers</li>
</ul></li>
</ul>
<h2 id="articles">Articles</h2>
<ul>
<li>Map and territory:
<ul>
<li><a href="https://mapandterritory.org/need-dynamics-54ca9ff5955c">Need dynamics</a>: “Coference” seems like a useful concept.</li>
<li><a href="https://mapandterritory.org/narrativemancy-101-why-paper-beats-rock-bc25bc1147b6">Narrativemancy 101</a>: The power of narrative comes from how it references your most vivid feelings.</li>
</ul></li>
<li>Slatestarcodex: <a href="https://slatestarcodex.com/2015/03/25/is-everything-a-religion/">Is everything a religion?</a></li>
<li><a href="http://lesswrong.com/lw/gej/i_attempted_the_ai_box_experiment_and_lost/">The AI box experiment</a></li>
<li><a href="https://blog.openai.com/evolution-strategies/">Evolutionary strategies</a> as an alternative to reinforcement learning (<a href="http://scrible.com/s/00V4A">h</a>)</li>
</ul>
<h2 id="an-amazing-piece-of-my-little-pony-fanfiction">An amazing piece of My Little Pony Fanfiction</h2>
<p><a href="http://www.fimfiction.net/story/62074/friendship-is-optimal">Friendship is optimal</a></p>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Thoughts and links, 1-2/2017</title>
    <link href="http://holdenlee.github.io/blog/posts/monthly_summaries/2017-2.html" />
    <id>http://holdenlee.github.io/blog/posts/monthly_summaries/2017-2.html</id>
    <published>2017-03-05T00:00:00Z</published>
    <updated>2017-03-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Thoughts and links, 1-2/2017</h1>
    </div>
    <div class="info">
      
       
        <p>Posted: 2017-03-05 
          , Modified: 2017-03-05 
	</p>
      
       <p>Tags: <a href="/tags/links.html">links</a></p> 
    </div>
    
  </div>
  <!--/div-->

  

  <div class="blog-main">
    <p>See all the links for <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232017-1">January</a> and <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232017-2">February</a>. (See <a href="4-16.html">April’s post</a> for an explanation of the organization.) Here are some highlights.</p>
<h2 id="podcast-picks">Podcast picks</h2>
<ul>
<li>Imaginary worlds
<ul>
<li><a href="https://soundcloud.com/emolinsky/28-days-of-black-cosplay">28 days of black cosplay</a></li>
<li><a href="https://soundcloud.com/emolinsky/growing-up-avatar-american">Growing up Avatar-American</a>: Why is Avatar so popular among Asian-Americans?</li>
</ul></li>
<li>On being
<ul>
<li><a href="http://onbeing.org/programs/alain-de-botton-the-true-hard-work-of-love-and-relationships/">Alain de Botton - The true hard work of love and relationships</a> (<a href="https://workflowy.com/s/wL3CyEXpHY#/0d15c4e47c78">notes</a>)</li>
<li><a href="http://www.onbeing.org/programs/maria-popova-cartographer-meaning-digital-age/">Maria Popova - Cartographer of meaning in a digital age</a> (<a href="https://workflowy.com/s/wL3CyEXpHY#/e3859eac9b59">notes</a>)</li>
</ul></li>
<li>Radiolab
<ul>
<li><a href="http://www.radiolab.org/story/stanger-paradise/">Stranger in paradise</a> Raccoons as an endangered species, or not?</li>
<li><a href="http://www.radiolab.org/story/radiolab-presents-media-busted-americas-poverty-myths/">On the media: busted, America’s poverty myths</a>.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> See also <a href="http://freakonomics.com/podcast/american-dream-really-dead/">Freakonomics: Is the American Dream really dead?</a></li>
</ul></li>
<li>Rationally speaking
<ul>
<li><a href="http://rationallyspeakingpodcast.org/show/rs-176-jason-brennan-on-against-democracy.html">176 - Against Democracy</a> What if democracy is not the best system of government?</li>
<li><a href="http://static1.1.sqspcdn.com/static/f/468275/27460112/1487645326207/rs178transcript.pdf?token=awXHfsGHawhCx3qAlBjpX7HiISU%3D">178 - Tim Urban on “Trying to live well, as semi-rational animals”</a></li>
</ul></li>
<li>Reply All
<ul>
<li><a href="https://gimletmedia.com/episode/86-man-of-the-people/">86 Man of the people</a> A mindblowing story about how far a scammer got by harnessing the power of a new technology - the radio.</li>
<li><a href="https://gimletmedia.com/episode/87-longmont/">87 Storming the castle</a> Prank calls as an art form, by <a href="http://longmontpotioncastle.com/">Longmont potion castle</a></li>
</ul></li>
<li>Reveal (investigative reporting)
<ul>
<li><a href="https://www.revealnews.org/episodes/the-year-in-reveal/">The year in Reveal</a>, including an interview with white nationalist Richard Spencer</li>
<li><a href="https://www.revealnews.org/episodes/the-man-inside-four-months-as-a-prison-guard/">The man inside: four months as a prison guard</a>: inside private prisons</li>
</ul></li>
<li>The Truth: <a href="http://www.thetruthpodcast.com/story/2017/1/11/the-dark-end-of-the-mall">The dark end of the mall</a> A post-apocalytic story</li>
<li>This American Life
<ul>
<li><a href="https://www.thisamericanlife.org/radio-archives/episode/607/didn%E2%80%99t-we-solve-this-one">607 Didn’t we solve this one?</a> Iraqis risk their lives by helping American forces, but get rejected from immigration.</li>
<li><a href="https://www.thisamericanlife.org/radio-archives/episode/610/grand-gesture">610 Grand gestures</a></li>
</ul></li>
<li>99 percent invisible
<ul>
<li><a href="http://99percentinvisible.org/episode/the-revolutionary-post/">244 The revolutionary post</a> - history of the postal service</li>
<li>On Frank Lloyd Wright’s architecture: <a href="http://99percentinvisible.org/episode/usonia-1/">246 Usonia 1</a> and <a href="http://99percentinvisible.org/episode/usonia-the-beautiful/">247 Usonia the beautiful</a></li>
<li><a href="http://99percentinvisible.org/episode/atom-garden-eden/">248 Atom in the garden of Eden</a> - the dream of the nuclear age, manifested in “gamma gardens”</li>
</ul></li>
<li>青春愛消遣
<ul>
<li><a href="http://youngloveplay.blogspot.com/2017/02/056.html">56 愛上德國男</a>: A story about love and limerence.</li>
</ul></li>
</ul>
<h2 id="articles-and-websites">Articles and websites</h2>
<ul>
<li><a href="http://zenpencils.com/">Zenpencils</a>: inspirational cartoon quotes</li>
<li>Rationality
<ul>
<li>Otium
<ul>
<li><a href="https://srconstantin.wordpress.com/2016/10/20/ra/">Ra</a> <a href="http://scrible.com/s/ifMm6">h</a>: A very good articulation of the corrupting force of generic superlativity. Related to Moloch, etc.</li>
<li><a href="https://srconstantin.wordpress.com/2016/03/21/there-is-no-secret-notebook/">There is no secret notebook</a> <a href="http://scrible.com/s/gDwm6">h</a></li>
</ul></li>
<li>Satvik Beri
<ul>
<li><a href="http://satvikberi.com/2016/12/26/increasing-output/">Increasing output</a>: Advice both for personal productivity and management.</li>
<li><a href="http://satvikberi.com/2015/03/31/efficiency-vs-disproportionate-results/">Efficiency vs. disproportionate results</a> <a href="http://scrible.com/s/kLx2C">h</a>: Two modes for solving problems that are too often disjoint.</li>
</ul></li>
</ul></li>
<li><a href="https://www.cs.princeton.edu/news/crowd-wisdom-surprisingly-popular-answer-can-trump-ignorance-masses">“Surprisingly popular” answer can trump ignorance of the masses</a></li>
<li><a href="https://airtable.com/">Airtable</a>: Useful spreadsheet program which can save multiple sort/filter views</li>
<li>AI safety resources:
<ul>
<li><a href="http://humancompatible.ai/bibliography#corrigibility">Human-compatible AI bibliography</a></li>
<li><a href="https://agentfoundations.org/">Agent foundations</a> (the “forum digest” posts are very helpful)</li>
<li><a href="https://arxiv.org/abs/1606.06565">Concrete problems in AI safety</a></li>
<li><a href="https://intelligence.org/2016/07/27/alignment-machine-learning/">Alignment in machine learning</a></li>
</ul></li>
</ul>
<h2 id="books">Books</h2>
<ul>
<li><a href="https://www.goodreads.com/book/show/332613.One_Flew_Over_the_Cuckoo_s_Nest">One flew over the cuckoo’s nest</a> - Set in a psychiatric hospital, but manages to a hopeful and humorous (and sad) story.</li>
<li><a href="https://www.goodreads.com/book/show/7405989-the-dragon-and-the-stars">The dragon and the stars</a> - collection of Chinese-themed sci-fi/fantasy short stories</li>
<li>Farseer trilogy, Robin Hobb - follows the life of an assassin, with all its moral dilemmas. I liked the treatment of magic (the Skill - telepathic ability to talk with or influence other people - and the Wit - a communing with animals).
<ul>
<li><a href="https://www.goodreads.com/book/show/77197.Assassin_s_Apprentice">Assassin’s Apprentice, Robin Hobb</a></li>
<li><a href="https://www.goodreads.com/book/show/25300956-royal-assassin">Royal Assassin, Robin Hobb</a></li>
</ul></li>
<li><a href="https://www.goodreads.com/book/show/18937.In_the_Beginning_Was_the_Command_Line">In the beginning was the command line, Neal Stephenson</a> - I wished I’d read this a long time ago; it illuminated some basic knowledge about computers which I lacked. A <a href="https://www.learnenough.com/command-line-tutorial">command line tutorial</a>.</li>
<li><a href="https://www.goodreads.com/book/show/22414.The_Invisible_Heart">The invisible heart: An economic romance, Russell Roberts</a> - A conversation about economics delightfully embedded in a love story. Made some good arguments for deregulation.</li>
<li><a href="https://www.goodreads.com/book/show/156785.Diaspora">Diaspora, Greg Egan</a> - Greg Egan goes very far in imagining the evolution of minds in cyberspace. Some interesting metaphors for mathematics. Different ways of embedding life/computation in the universe. A journey through multiple universes in search for…?</li>
<li>Comics!
<ul>
<li><a href="https://www.goodreads.com/book/show/25546167-descender-vol-1">Descender 1</a> After a mysterious AI wreaks destruction, robots are outlawed. Follows the story of an android who wakes up in this world.</li>
<li><a href="https://www.goodreads.com/book/show/15704307-saga-vol-1">Saga 1</a> A couple from opposite sides of a galactic war tries to escape being hunted on all sides. Writing and art is fantastic. Also, +1 for Esperanto.</li>
</ul></li>
<li><a href="https://www.goodreads.com/book/show/22571552-so-you-ve-been-publicly-shamed">So you’ve been publicly shamed, Jon Ronson</a>. Starting with several stories of Twitter shaming gone out of control, investigates how public shaming has transformed in recent years, the morality and role of public shaming, how to mitigate it, etc.</li>
</ul>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>A quote: when we feel gratitude we’re more generous to strangers, when we’re more aware of luck’s importance, we’re more likely to plow our own fortune back into the common good. But we underplay luck because we can recall our own struggles far better than the fateful but fuzzy role of chance and because the very idea corrodes our faith in free will, but mostly because like Benny Franklin, we’re deeply invested in our own autobiographies.<a href="#fnref1">↩</a></p></li>
</ol>
</section>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Interactive Learning (Simons Workshop)</title>
    <link href="http://holdenlee.github.io/blog/posts/cs/ml/simons_ml_interactive.html" />
    <id>http://holdenlee.github.io/blog/posts/cs/ml/simons_ml_interactive.html</id>
    <published>2017-02-13T00:00:00Z</published>
    <updated>2017-02-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Interactive Learning (Simons Workshop)</h1>
    </div>
    <div class="info">
       <div class="subtitle"><p>Notes</p></div> 
       
        <p>Posted: 2017-02-13 
          , Modified: 2017-02-13 
	</p>
      
       <p>Tags: <a href="/tags/machine%20learning.html">machine learning</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"></div>

  <div class="blog-main">
    <p>I’m currently attending the <a href="https://simons.berkeley.edu/workshops/machinelearning2017-1">Interactive Learning</a> workshop at the Simons Institute.</p>
<p>Here are my <a href="https://www.dropbox.com/s/mxbbdv8i11f63an/interactive_workshop.pdf?dl=0">notes</a>. Source is available on <a href="https://github.com/holdenlee/simons-ml">github</a>.</p>
<p>I’m also taking notes on seminars and reading groups at the Simons Program in Machine Learning. All notes are available on the <a href="http://simons.squidhive.net/Notes">Simons Program wiki</a>.</p>
<p>I will update this page as the workshop progresses.</p>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Goodnight Mel</title>
    <link href="http://holdenlee.github.io/blog/posts/writing/goodnight_mel.html" />
    <id>http://holdenlee.github.io/blog/posts/writing/goodnight_mel.html</id>
    <published>2017-01-29T00:00:00Z</published>
    <updated>2017-01-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Goodnight Mel</h1>
    </div>
    <div class="info">
       <div class="subtitle"><p>A ghost story</p></div> 
       
        <p>Posted: 2017-01-29 
          , Modified: 2017-01-29 
	</p>
      
       <p>Tags: <a href="/tags/fiction.html">fiction</a>, <a href="/tags/short%20story.html">short story</a>, <a href="/tags/ghost%20story.html">ghost story</a></p> 
    </div>
    
  </div>
  <!--/div-->

  

  <div class="blog-main">
    <p>I’m proud to present my newest short story, Goodnight Mel, about a couple who moves into a house haunted by a girl who plays strange music.</p>
<p>You can read it <a href="https://docs.google.com/document/d/1Pxs_3NstJrN3YwTQBmLDaLNwBJv6FBGzF23zDpFY0UI/edit">here</a>.</p>
<p>Feedback is welcome!</p>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Foundations of Machine Learning Boot Camp (Simons Workshop)</title>
    <link href="http://holdenlee.github.io/blog/posts/cs/ml/simons_ml_bootcamp.html" />
    <id>http://holdenlee.github.io/blog/posts/cs/ml/simons_ml_bootcamp.html</id>
    <published>2017-01-23T00:00:00Z</published>
    <updated>2017-01-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Foundations of Machine Learning Boot Camp (Simons Workshop)</h1>
    </div>
    <div class="info">
       <div class="subtitle"><p>Notes</p></div> 
       
        <p>Posted: 2017-01-23 
          , Modified: 2017-01-23 
	</p>
      
       <p>Tags: <a href="/tags/machine%20learning.html">machine learning</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"></div>

  <div class="blog-main">
    <p>I’m currently attending the <a href="https://simons.berkeley.edu/programs/machinelearning2017">Foundations of Machine Learning</a> program at the Simons Institute.</p>
<p>Here are my <a href="https://www.dropbox.com/s/cbwmt7i2o9p0ki0/simons_ml.pdf?dl=0">notes</a> for the first workshop (Foundation of Machine Learning Boot Camp). Source is available on <a href="https://github.com/holdenlee/simons-ml">github</a>.</p>
<p>I’m also taking notes on seminars and reading groups at the Simons Program in Machine Learning. All notes are available on the <a href="http://simons.squidhive.net/Notes">Simons Program wiki</a>.</p>
<p>I will update this page as the workshop progresses.</p>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Thoughts and links, 11-12/2016</title>
    <link href="http://holdenlee.github.io/blog/posts/monthly_summaries/12-16.html" />
    <id>http://holdenlee.github.io/blog/posts/monthly_summaries/12-16.html</id>
    <published>2017-01-01T00:00:00Z</published>
    <updated>2017-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Thoughts and links, 11-12/2016</h1>
    </div>
    <div class="info">
       <div class="subtitle"><p>Election in perspective, the year in ML</p></div> 
       
        <p>Posted: 2017-01-01 
          , Modified: 2017-01-01 
	</p>
      
       <p>Tags: <a href="/tags/links.html">links</a>, <a href="/tags/election.html">election</a>, <a href="/tags/machine%20learning.html">machine learning</a>, <a href="/tags/AI.html">AI</a></p> 
    </div>
    
  </div>
  <!--/div-->

  

  <div class="blog-main">
    <p>See all the links for <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232016-11">November</a> and <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232016-12">December</a>. (See <a href="4-16.html">April’s post</a> for an explanation of the organization.) Here are some highlights.</p>
<ul>
<li>Putting the election in perspective
<ul>
<li>Pre-election posts
<ul>
<li>Putanumonit: <a href="https://putanumonit.com/2016/11/07/the-day-after-tomorrow/">The day after tomorrow</a></li>
<li>Slatestarcodex: <a href="http://slatestarcodex.com/2016/11/07/tuesday-shouldnt-change-the-narrative/">Tuesday shouldn’t change the narrative</a></li>
<li><p><a href="http://www.vox.com/2016/4/21/11451378/smug-american-liberalism">The smug style in American liberalism</a> <a href="http://scrible.com/s/gexAS">h</a></p>
<blockquote>
<p>If the smug style can be reduced to a single sentence, it’s, Why are they voting against their own self-interest?…</p>
<p>If Donald Trump has a chance in November, it is because the knowing will dictate our strategy. Unable to countenance the real causes of their collapse, they will comfort with own impotence by shouting, “Idiots!” again and again, angrier and angrier, the handmaidens of their own destruction.</p>
<p>The smug style resists empathy for the unknowing. It denies the possibility of a politics whereby those who do not share knowing culture, who do not like the right things or know the Good Facts or recognize the intellectual bankruptcy of their own ideas can be worked with, in spite of these differences, toward a common goal…</p>
<p>It is impossible, in the long run, to cleave the desire to help people from the duty to respect them…</p>
<p>The smug style, at bottom, is a failure of empathy. Further: It is a failure to believe that empathy has any value at all.</p>
</blockquote></li>
</ul></li>
<li>This American Life: <a href="https://www.thisamericanlife.org/radio-archives/episode/602/the-sun-comes-up">602 The sun comes up</a> Talking with people from both sides after the election</li>
<li>Putanumonit: <a href="https://putanumonit.com/2016/11/09/this-is-the-way-the-world-is/">This is the way the world is</a></li>
<li>Waitbutwhy: <a href="http://waitbutwhy.com/2016/11/its-going-to-be-okay.html">It’s going to be okay</a></li>
<li><a href="https://www.hifromtheotherside.com/">Hi from the other side</a>: Meet someone who supported the other candidate.</li>
</ul></li>
<li><a href="https://www.theguardian.com/books/2016/nov/01/haruki-murakami-hans-christian-anderdersen-prize-speech-outsiders">Haruki Murakami cautions against excluding outsiders</a></li>
<li>Academic
<ul>
<li>Jeremy Kun writes about his <a href="https://medium.com/@jeremyjkun/my-graduate-career-in-math-85fd4efb0fa9">graduate career in math</a>.</li>
<li><a href="https://chroniclevitae.com/news/836-the-trick-to-being-a-prolific-scholar">Trick to being a prolific scholar</a>: Write your thoughts every day.</li>
</ul></li>
<li>Podcasts
<ul>
<li>Radiolab:
<ul>
<li><a href="http://www.radiolab.org/story/one-vote/">One Vote</a>: India’s goes to great lengths to make sure everyone is within a mile of a polling station. When one vote actually matters.</li>
<li><a href="http://www.radiolab.org/story/bringing-gamma-back/">Bringing gamma back</a>: Lights flashing 40 times per second can treat Alzheimer’s in rats.</li>
</ul></li>
<li>Rationally speaking: <a href="http://rationallyspeakingpodcast.org/show/rs-172-brian-nosek-on-why-science-needs-openness.html">172 Brian Nosek on “Why science needs openness”</a></li>
<li>Reply all: <a href="https://gimletmedia.com/episode/83-voyage-into-pizzagate/">83 Voyage into Pizzagate</a> How far a conspiracy theory goes. What should Reddit’s role as mediator be?</li>
<li>Reveal: <a href="https://www.revealnews.org/episodes/the-pentagon-papers-secrets-lies-and-leaks/">The Pentagon Papers: Secrets, lies and leaks</a></li>
<li>Strangers: (Warning: these stories can be graphic/disturbing)
<ul>
<li><a href="http://www.storycentral.org/the-truth/">The Truth</a> - dealing with a husband’s alleged sexual abuse of his children</li>
<li><a href="http://www.storycentral.org/lex/">Lex</a> - when a son’s insanity endangers his family</li>
</ul></li>
<li>The Truth: <a href="http://www.thetruthpodcast.com/story/2015/10/7/naughty-or-nice">Naughty or nice</a> Santa surveillance and quick decision-making</li>
<li>99% invisible
<ul>
<li><a href="http://99percentinvisible.org/episode/ten-letters-president/">235 Ten letters to the president</a>: Obama reads 10 letters every day.</li>
<li><a href="http://99percentinvisible.org/episode/dollar-store-town-inside-worlds-biggest-wholesale-market/">237 Dollar store town</a>: The economy of Yiwu, China, is based on dollar store goods.</li>
<li><a href="http://99percentinvisible.org/episode/guano-mania/">239 Guano island</a>: The historical impact of a guano obsession</li>
</ul></li>
</ul></li>
<li>Technology and society
<ul>
<li><a href="http://www.economist.com/news/briefing/21711902-worrying-implications-its-social-credit-project-china-invents-digital-totalitarian?frsc=dg%7Cc">China invents the digital totalitarian state</a></li>
<li><a href="https://www.theguardian.com/technology/2016/dec/16/uber-self-driving-cars-california-illegal-unethical-tactics">Uber defies CA laws</a></li>
<li><a href="http://www.nytimes.com/2016/12/14/magazine/the-great-ai-awakening.html">The Great AI Awakening</a>: a wonderful synthesis of what enabled Google’s recent breakthrough in machine translation</li>
<li><a href="https://www.oreilly.com/ideas/the-current-state-of-machine-intelligence-3-0?utm_content=bufferb04ac&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">The current state of machine intelligence 3.0</a></li>
<li><a href="http://www.newyorker.com/business/currency/silicon-valley-has-an-empathy-vacuum">Silicon valley has an empathy vacuum</a>, <a href="http://www.newyorker.com/magazine/2014/07/07/california-screaming">California screaming</a></li>
</ul></li>
<li>Rationality
<ul>
<li><a href="https://putanumonit.com/2015/12/17/009-smelly/">I smell a chart</a>: how to spot BS in a pretty chart</li>
<li><a href="http://waitbutwhy.com/2014/10/religion-for-the-nonreligious.html">Religion for the nonreligious</a></li>
</ul></li>
<li>I’ve been fascinated by tulpas, daemons, and other thoughtforms since listening to <a href="https://gimletmedia.com/episode/74-making-friends/">this podcast</a>.
<ul>
<li>See /r/tulpas <a href="http://scrible.com/s/06BMS">introduction</a>, <a href="http://scrible.com/s/0eRSS">FAQ</a>.</li>
<li>See also <a href="https://www.tulpa.info/">tulpa.info</a> and <a href="https://tulpa.io/">tulpa.io</a>.</li>
<li><a href="http://daemonpage.com/">Daemons</a></li>
<li><a href="http://astraeasweb.net/plural/mediantalk.html">Medians</a></li>
<li><a href="https://www.reddit.com/r/Tulpas/comments/3t0z1h/what_are_some_good_tulpa_blogs_both_alive_ones_to/">List of blogs</a>
<ul>
<li><a href="http://ofthoughtformsanddaemons.tumblr.com/">Of thoughtforms and daemons</a></li>
<li><a href="http://ponystasha.tumblr.com/">Tulpas gone wrong</a></li>
</ul></li>
</ul></li>
<li><a href="http://voiceofnature.tumblr.com/post/150051322751/squirrels-and-mushrooms-by-odd-e-kj%C3%B8lstad">Voice of nature: squirrels and mushrooms</a></li>
<li>The <a href="http://envision-conference.com/">Envision conference</a> on future technology happened at Princeton. <a href="https://workflowy.com/s/wL3CyEXpHY#/be3708f86f05">Notes from the AI panel</a>.</li>
<li>I went to New York for a weekend:
<ul>
<li>I visited the <a href="http://momath.org/">Museum of Mathematics</a> which I found delightul. This led me to getting an Ultimate Burr set for Christmas. A <a href="http://www.robspuzzlepage.com/interlocking.htm#trad">comprehensive guide to Burr puzzles</a>.</li>
<li>I had a great time at the <a href="http://secularsolstice.com/">Secular Solstice</a> (like a “religious” celebration for the rationalist). Some of the <a href="https://humanistculture.bandcamp.com/album/brighter-than-today-a-secular-solstice">songs</a>.</li>
<li>I attended my first Esperanto meetup in <a href="https://www.meetup.com/EsperantoSocietyOfNewYork/">NYC</a> and was pleasantly surpised by how much I could comprehend with 3 months of learning.</li>
</ul></li>
<li>Books
<ul>
<li><a href="https://www.goodreads.com/book/show/7711491-gold-boy-emerald-girl">Gold boy emerald girl, Yiyun Li</a> <a href="https://workflowy.com/s/4qkO9xWz4M#/c488a2116104">detailed notes</a>, <a href="https://docs.google.com/document/d/1v-_YXJa6kQ6bwZ5nYcFecVToYbDI26yywrkc0oyrQuY/edit?usp=sharing">summary notes</a>: Short story collection, set in China</li>
<li><a href="https://www.goodreads.com/book/show/20518872-the-three-body-problem">Three body problem, Cixin Liu</a>: How does humanity respond to the coming of alien overlords? Set against the backdrop of China’s Cultural Revolution.</li>
<li><a href="https://www.goodreads.com/book/show/12961964-the-handmaid-s-tale">The Handmaid’s Tale</a></li>
</ul></li>
</ul>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Snake in Purescript</title>
    <link href="http://holdenlee.github.io/blog/posts/programming/purescript/snake-in-purescript.html" />
    <id>http://holdenlee.github.io/blog/posts/programming/purescript/snake-in-purescript.html</id>
    <published>2016-11-06T00:00:00Z</published>
    <updated>2016-11-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Snake in Purescript</h1>
    </div>
    <div class="info">
       <div class="subtitle"><p>How to program a simple game in Purescript</p></div> 
       
        <p>Posted: 2016-11-06 
          , Modified: 2016-11-06 
	</p>
      
       <p>Tags: <a href="/tags/purescript.html">purescript</a>, <a href="/tags/programming.html">programming</a>, <a href="/tags/functional%20programming.html">functional programming</a>, <a href="/tags/game.html">game</a></p> 
    </div>
    
  </div>
  <!--/div-->

  <div class="toc"> <ul>
 <li><a href="#introduction">Introduction</a></li>
 <li><a href="#getting-started">Getting started</a></li>
 <li><a href="#imports">Imports</a></li>
 <li><a href="#the-model-update-view-signal-architecture">The Model-Update-View-Signal Architecture</a></li>
 <li><a href="#model">Model</a></li>
 <li><a href="#update">Update</a></li>
 <li><a href="#view">View</a></li>
 <li><a href="#signal">Signal</a></li>
 <li><a href="#adding-randomness">Adding randomness</a><ul>
 <li><a href="#something-that-doesnt-work">Something that doesn’t work</a></li>
 <li><a href="#using-a-generator">Using a generator</a></li>
 </ul></li>
 <li><a href="#building">Building</a></li>
 </ul> </div>

  <div class="blog-main">
    <h2 id="introduction">Introduction</h2>
<ul>
<li>Play the game <a href="https://holdenlee.github.io/purescript-games/html/SnakeS.html">here</a>.</li>
<li>Check out the code on <a href="https://github.com/holdenlee/purescript-games">github</a>.
<ul>
<li>The code for <code>Snake.purs</code> is <a href="https://github.com/holdenlee/purescript-games/blob/master/src/Snake.purs">here</a>.</li>
</ul></li>
</ul>
<p><a href="http://www.purescript.org/">Purescript</a> is a functional programming language that compiles down to Javascript. In this post, I describe the process of building a simple game, Snake, in PureScript. Along the way, we’ll see how input/signals work, how to render to the screen, and how to work with arrays. I assume familiarity with functional programming. I’ll make some comparisons with Haskell and Elm.</p>
<p>I like Purescript because it has the functional power of <a href="https://www.haskell.org/">Haskell</a>, while fitting very well into the web ecosystem (e.g. interops with Javascript), like <a href="http://www.elm-lang.org">Elm</a>. Think of it as Elm with all the features that come with Haskell, such as monads. <!--foreign functions--></p>
<p>Some resources:</p>
<ul>
<li>Reference
<ul>
<li><a href="http://www.purescript.org">Main page</a></li>
<li><a href="https://leanpub.com/purescript/read">Ebook (PureScript by Example)</a></li>
<li><a href="https://github.com/purescript/purescript/wiki/Language-Guide">Language guide</a></li>
<li><a href="https://pursuit.purescript.org/">Documentation (Pursuit)</a></li>
</ul></li>
<li>Purescript for Haskell/Elm users
<ul>
<li><a href="https://github.com/purescript/purescript/wiki/Differences-from-Haskell">Differences from Haskell</a></li>
<li><a href="http://www.arow.info/blog/posts/2015-12-17-purescript-intro.html">PureScript for the Haskeller</a></li>
<li><a href="http://www.parsonsmatt.org/2015/10/03/elm_vs_purescript.html">Elm vs. PureScript</a></li>
<li><a href="http://www.lambdacat.com/getting-to-know-purescript-from-elm/">Getting to know PureScript from Elm</a></li>
</ul></li>
<li><a href="http://www.purescript.org/community/">Community</a>: The folks on Slack and IRC have been very helpful in helping me get set up and debugging my code.</li>
<li>Other things written using <code>purescript-signal</code>
<ul>
<li><a href="https://github.com/michaelficarra/purescript-demo-mario">Mario</a></li>
<li><a href="https://github.com/bodil/purescript-is-magic">Purescript is Magic</a></li>
</ul></li>
</ul>
<h2 id="getting-started">Getting started</h2>
<p>First follow the instructions <a href="http://www.purescript.org/learn/getting-started/">here</a> to install Purescript.</p>
<p>Start a new project by</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">mkdir</span> basic-games
<span class="bu">cd</span> basic-games
<span class="ex">pulp</span> init</code></pre></div>
<p>Create a file <code>Snake.purs</code> in <code>src/</code>.</p>
<h2 id="imports">Imports</h2>
<p>First, the imports.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Snake</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span> <span class="co">-- must be explicitly imported</span>
<span class="kw">import </span><span class="dt">Control.Monad.Eff</span> (<span class="dt">Eff</span>)
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Console</span> (<span class="dt">CONSOLE</span>, log)
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Random</span> (<span class="dt">RANDOM</span>, randomInt)
<span class="kw">import </span><span class="dt">Data.Array</span> (length, uncons, slice, (:), last)
<span class="kw">import </span><span class="dt">Data.Array.Partial</span> (head)
<span class="kw">import </span><span class="dt">Data.Functor</span>
<span class="kw">import </span><span class="dt">Data.Generic</span>
<span class="kw">import </span><span class="dt">Data.Int</span>
<span class="kw">import </span><span class="dt">Data.Maybe</span>
<span class="kw">import </span><span class="dt">Data.Traversable</span>
<span class="kw">import </span><span class="dt">Data.Tuple</span>
<span class="kw">import </span><span class="dt">Graphics.Canvas</span> (<span class="dt">CANVAS</span>, closePath, lineTo, moveTo, fillPath,
                        setFillStyle, arc, rect, getContext2D,
                        getCanvasElementById, <span class="dt">Context2D</span>, <span class="dt">Rectangle</span>, clearRect)
<span class="kw">import </span><span class="dt">Partial.Unsafe</span> (unsafePartial)
<span class="kw">import </span><span class="dt">Signal</span> (<span class="dt">Signal</span>, runSignal, foldp, sampleOn, map4)
<span class="kw">import </span><span class="dt">Signal.DOM</span> (keyPressed)
<span class="kw">import </span><span class="dt">Signal.Time</span> (<span class="dt">Time</span>, second, every)
<span class="kw">import </span><span class="dt">Test.QuickCheck.Gen</span> <span class="co">-- for randomness</span></code></pre></div>
<p>You will need to install all these packages. You can install them one at a time via</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">bower</span> install <span class="op">&lt;</span>package-name<span class="op">&gt;</span> --save</code></pre></div>
<p>or copy the <code>bower.json</code> file <a href="https://github.com/holdenlee/purescript-games/blob/master/bower.json">here</a> and do <code>bower install</code> to install all of them at once.</p>
<h2 id="the-model-update-view-signal-architecture">The Model-Update-View-Signal Architecture</h2>
<p>We break our program into the following parts. (For more information, see the <a href="http://guide.elm-lang.org/architecture/">Elm architecture tutorial</a>.)</p>
<ul>
<li><strong>Model</strong>: This is a complete description of the state of the program at any time. For Snake, this would include the array containing all points of the snake, the direction it is going, and the location of the mouse.</li>
<li><strong>Update</strong>: Define a <code>step</code> function which given an input and the current model, returns the updated model. For Snake, an update would be the direction, and the step function would move the snake one unit in that direction, and check for things like whether the snake ate the mouse or bumped into the wall.</li>
<li><strong>View</strong>: Given a model, describe how to render it on the screen.</li>
<li><strong>Signal</strong>: Specify the input signals. A signal of type <code>a</code> is a time-varying value of type <code>a</code>. For a primer on signals see <a href="http://elm-lang.org:1234/guide/reactivity#signals">here</a>.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></li>
</ul>
<p><img src="/images/mvus.png"></p>
<p>To put these components together we use:</p>
<ul>
<li><p><code>foldp</code>, the magic function that “folds” the input signals into the model via the <code>step</code> function. Note the similarity to <a href="http://colah.github.io/posts/2015-02-DataList-Illustrated/">foldl</a> both in the type signature and the picture. In the picture <code>a</code> corresponds to <code>Input</code> and <code>b</code> corresponds to <code>Model</code>. So given time-varying inputs and a starting model, <code>foldp</code> produces a time-varying model.</p>
<pre><code>foldp :: forall a b. (a -&gt; b -&gt; b) -&gt; b -&gt; (Signal a) -&gt; (Signal b)</code></pre></li>
<li><p><code>runSignal</code>: Given a signal encapsulating an effect, makes the effect happen.</p>
<pre><code>runSignal :: forall e. Signal (Eff e Unit) -&gt; Eff e Unit</code></pre>
<p>(In the old version of Elm, <code>main</code> is simply a <code>Signal</code>, but here, the type of <code>main</code> is an analogue of <code>IO</code> in Haskell.)</p></li>
</ul>
<!-- which given a signal of type `a` and a way to turn something of type `a` into an effect (e.g. a way to render it), makes the effect happen (e.g. renders it). -->
<p>The skeleton of the program looks like this.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Model</span>
<span class="kw">type</span> <span class="dt">Model</span> <span class="fu">=</span> <span class="fu">???</span>

<span class="ot">start ::</span> <span class="dt">Model</span> 
start <span class="fu">=</span> <span class="fu">???</span>

<span class="co">-- Update</span>
<span class="kw">type</span> <span class="dt">Input</span> <span class="fu">=</span> <span class="fu">???</span>

<span class="ot">step ::</span> <span class="dt">Input</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Model</span>
step inp m <span class="fu">=</span> <span class="fu">???</span>

<span class="co">-- View</span>
<span class="ot">render ::</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Eff</span> _ <span class="dt">Unit</span> 
render m <span class="fu">=</span> <span class="fu">???</span>

<span class="co">-- Signal </span>
<span class="ot">input ::</span> <span class="dt">Eff</span> _ (<span class="dt">Signal</span> <span class="dt">Input</span>)
input <span class="fu">=</span> <span class="fu">???</span>

<span class="co">-- Putting it all together</span>
<span class="ot">main ::</span> <span class="dt">Eff</span> _ <span class="dt">Unit</span>
main <span class="fu">=</span> 
    void <span class="kw">do</span>
      signal <span class="ot">&lt;-</span> input
	  <span class="co">-- game :: Signal Model</span>
      game <span class="ot">&lt;-</span> foldp step start signal
	  <span class="co">-- map :: forall a b. (a -&gt; b) -&gt; f a -&gt; f b</span>
	  <span class="co">--        (Model -&gt; Eff _ Unit) -&gt; Signal Model -&gt; Signal (Eff _ Unit)</span>
      runSignal (map render game)</code></pre></div>
<p>The <code>Eff</code> monad corresponds to Haskell’s <code>IO</code> monad, but uses <em>extensible effects</em>: it lists out explicitly all the effects it has (access to randomness, DOM, drawing canvas, console, etc.). For example, <code>Eff (random :: RANDOM, canvas :: CANVAS | eff) Unit</code> means having effects that include <code>RANDOM</code> and <code>CANVAS</code>). PureScript will infer all effects if you put <code>_</code>. See <a href="https://leanpub.com/purescript/read#leanpub-auto-the-eff-monad-1">Chapter 8.10</a> of the PureScript book.</p>
<p>For a warm-up, <a href="https://github.com/holdenlee/purescript-games/blob/master/src/SimpleMove.purs">here</a> is a basic example following this paradigm. Here, the model is an integer (the location on a single axis), the update is moving -1, 0, or 1 units, the view is simply writing the location to the console, and the signal comes from the arrow keys once every second.</p>
<h2 id="model">Model</h2>
<p>For Snake, the model is a record containing</p>
<ul>
<li>the location of the <code>mouse</code></li>
<li><code>snake</code> as an array of points</li>
<li>whether the snake is <code>alive</code></li>
</ul>
<p>We also include some the dimensions <code>xd</code>, <code>yd</code> of the game board, the <code>size</code> of each square (alternatively, these can be hard-coded in), and the <code>prev</code> square (this is optional—it gives us an easy way to erase the tail of the snake when it moves). Valid positions are in <span class="math inline">\([1,xd]\times [1,yd]\)</span>.</p>
<p>We want the mouse location to be generated at random. How to do this? We’ll fill in that part later. (For now, you can put in an arbitrary point.)</p>
<p>Note also that the y-coordinate is 0 at the top of the screen and increases going down. The snake starts at the upper-left corner moving right.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">Point</span> <span class="fu">=</span> <span class="dt">Tuple</span> <span class="dt">Int</span> <span class="dt">Int</span>

<span class="co">--MODEL</span>
<span class="kw">type</span> <span class="dt">Snake</span> <span class="fu">=</span> <span class="dt">Array</span> <span class="dt">Point</span>

<span class="kw">type</span> <span class="dt">Model</span> <span class="fu">=</span> {<span class="ot">xd ::</span> <span class="dt">Int</span>,<span class="ot"> yd ::</span> <span class="dt">Int</span>,<span class="ot"> size ::</span> <span class="dt">Int</span>,<span class="ot"> mouse::</span> <span class="dt">Point</span>,<span class="ot"> snake ::</span> <span class="dt">Snake</span>,<span class="ot"> dir ::</span> <span class="dt">Point</span>,<span class="ot"> alive ::</span> <span class="dt">Boolean</span>,<span class="ot"> prev ::</span> <span class="dt">Maybe</span> <span class="dt">Point</span>}

<span class="ot">start ::</span> <span class="dt">Model</span>
start <span class="fu">=</span> 
  {xd <span class="fu">:</span> <span class="dv">25</span>, yd <span class="fu">:</span> <span class="dv">25</span>, size <span class="fu">:</span> <span class="dv">10</span>, mouse <span class="fu">:</span> <span class="fu">??</span>, snake <span class="fu">:</span> [<span class="dt">Tuple</span> <span class="dv">1</span> <span class="dv">1</span>], dir<span class="fu">:</span> <span class="dt">Tuple</span> <span class="dv">1</span> <span class="dv">0</span>, alive <span class="fu">:</span> true, prev <span class="fu">:</span> <span class="dt">Nothing</span>}</code></pre></div>
<p>Note unlike Haskell,</p>
<ul>
<li>there is no syntactic sugar for <code>Tuple</code>.</li>
<li>the basic list type is <code>Array</code>.</li>
<li>booleans are <code>Boolean</code> and have values <code>true</code> or <code>false</code>.</li>
</ul>
<h2 id="update">Update</h2>
<p>First we need two helper function: check to see if a point is in bounds, and check to see if the snake is OK (given the point where the head of the snake moves, check to see that it is in bounds and not part of the snake’s body).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">inBounds ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Boolean</span>
inBounds (<span class="dt">Tuple</span> x y) m <span class="fu">=</span> 
  (x <span class="fu">&gt;</span> <span class="dv">0</span>) <span class="fu">&amp;&amp;</span> (y <span class="fu">&gt;</span> <span class="dv">0</span>) <span class="fu">&amp;&amp;</span> (x <span class="fu">&lt;=</span> m<span class="fu">.</span>xd) <span class="fu">&amp;&amp;</span> (y <span class="fu">&lt;=</span> m<span class="fu">.</span>yd)

<span class="ot">checkOK ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Boolean</span>
checkOK pt m <span class="fu">=</span> 
  <span class="kw">let</span>
    s <span class="fu">=</span> m<span class="fu">.</span>snake
  <span class="kw">in</span>
    m<span class="fu">.</span>alive <span class="fu">&amp;&amp;</span> (inBounds pt m) <span class="fu">&amp;&amp;</span> not (pt <span class="ot">`elem`</span> (body s))
	
<span class="ot">body ::</span> forall a<span class="fu">.</span> <span class="dt">Array</span> a <span class="ot">-&gt;</span> <span class="dt">Array</span> a
body li <span class="fu">=</span> slice <span class="dv">0</span> ((length li) <span class="fu">-</span> <span class="dv">1</span>) li</code></pre></div>
<p>For the step function, there are 3 cases:</p>
<ul>
<li>The snake is OK:
<ul>
<li>The snake eats the mouse. The snake grows, and regenerate the mouse on a random square. (We omit the randomness for now.)</li>
<li>The snake doesn’t eat the mouse, in which case it moves. Here <code>body</code> is all of the snake except the last point.</li>
</ul></li>
<li>The snake is not OK: <code>alive = false</code> and nothing else happens.</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">step ::</span> <span class="dt">Partial</span> <span class="ot">=&gt;</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Model</span>
step dir m <span class="fu">=</span> 
  <span class="kw">let</span>
	<span class="co">-- override the direction with the input, unless there is no input (corresponding to (0,0))</span>
    d <span class="fu">=</span> <span class="kw">if</span> dir <span class="fu">/=</span> <span class="dt">Tuple</span> <span class="dv">0</span> <span class="dv">0</span>
        <span class="kw">then</span> dir
        <span class="kw">else</span> m<span class="fu">.</span>dir
    s <span class="fu">=</span> m<span class="fu">.</span>snake
    <span class="kw">let</span> hd <span class="fu">=</span> (head s <span class="fu">+</span> d)
    <span class="kw">if</span> checkOK hd m
      <span class="kw">then</span> 
        <span class="kw">if</span> (hd <span class="fu">==</span> m<span class="fu">.</span>mouse) 
        <span class="kw">then</span> m { snake <span class="fu">=</span> hd <span class="fu">:</span> s
               , mouse <span class="fu">=</span> <span class="fu">???</span>
               , dir <span class="fu">=</span> d
               , prev <span class="fu">=</span> <span class="dt">Nothing</span> <span class="co">-- snake grows; nothing is deleted</span>
               }
        <span class="kw">else</span> m { snake <span class="fu">=</span> hd <span class="fu">:</span> (body s)
               , dir <span class="fu">=</span> d
               , prev <span class="fu">=</span> last s <span class="co">-- snake moves; the last pixel is deleted</span>
               }
      <span class="kw">else</span> m { alive <span class="fu">=</span> false, prev <span class="fu">=</span> <span class="dt">Nothing</span>}</code></pre></div>
<p>Some differences from Haskell:</p>
<ul>
<li>Note that all partial functions must be notated with the empty type constraint <code>Partial</code>. <code>head</code> as imported from <code>Data.Array.Partial</code> is a partial function because it is undefined on <code>[]</code>. (We need not worry because the snake will never be empty.)</li>
<li>Polymorphic functions must have type variables listed out at the beginning after <code>forall</code>.</li>
</ul>
<p>Note that we can add points! (Note the line <code>head s + d</code>.) This is because <code>Data.Tuple</code> has the instance <code>(Ring a, Ring b) =&gt; Ring (Tuple a b)</code>. If both components of a tuple can be added, then addition is automatically defined for the tuple.</p>
<h2 id="view">View</h2>
<p>Given the model, we have 4 things to render: the walls (a <span class="math inline">\(27\times 27\)</span> rectangle here), the background (a <span class="math inline">\(25\times 25\)</span> rectangle), the snake and the mouse. For instructions on using <code>purescript-canvas</code> see <a href="https://leanpub.com/purescript/read#leanpub-auto-canvas-graphics">Chapter 9</a> of the PureScript book. Change the colors as you wish.</p>
<pre><code>render :: forall eff. Partial =&gt; Model -&gt; (Eff _ Unit)
render m = 
  void do
        let s = m.snake
        let size = m.size
        Just canvas &lt;- getCanvasElementById &quot;canvas&quot;
        ctx &lt;- getContext2D canvas
        --walls
        setFillStyle wallColor ctx
        fillPath ctx $ rect ctx
                     { x: 0.0
                     , y: 0.0
                     , w: toNumber $ size*(m.xd + 2)
                     , h: toNumber $ size*(m.yd + 2)
                     }
        --interior
        setFillStyle bgColor ctx
        fillPath ctx $ rect ctx
                     { x: toNumber $ size
                     , y: toNumber $ size
                     , w: toNumber $ size*(m.xd)
                     , h: toNumber $ size*(m.yd)
                     }
        --snake 
        for s (\x -&gt; colorSquare m.size x snakeColor ctx)
        --mouse
        colorSquare m.size (m.mouse) mouseColor ctx
		
colorSquare :: forall eff. Int -&gt; Point -&gt; String -&gt; Context2D -&gt; Eff (canvas :: CANVAS | eff) Context2D
colorSquare size (Tuple x y) color ctx = do
  setFillStyle color ctx
  fillPath ctx $ rect ctx $ square size x y

square :: Int -&gt; Int -&gt; Int -&gt; Rectangle
square size x y = { x: toNumber $ size*x
                  , y: toNumber $ size*y
                  , w: toNumber $ size
                  , h: toNumber $ size
                  }

white = &quot;#FFFFFF&quot;
black = &quot;#000000&quot;
red = &quot;#FF0000&quot;
yellow = &quot;#FFFF00&quot;
green = &quot;#008000&quot;
blue = &quot;#0000FF&quot;
purple = &quot;800080&quot;

snakeColor = white
bgColor = black
mouseColor = red
wallColor = green</code></pre>
<p>The render function is a bit inefficient since it is redrawing the entire canvas every step (it doesn’t make much difference for such a simple game though). We can replace later calls to <code>render</code> with <code>renderStep</code> which only changes the squares that need to be changed at each time step. (There is much more freedom than Elm to draw specify what you want to draw and redraw.)</p>
<pre><code>renderStep :: forall eff. Partial =&gt; Model -&gt; Eff (canvas :: CANVAS | eff) Unit
renderStep m = 
  void do
        let s=m.snake
        Just canvas &lt;- getCanvasElementById &quot;canvas&quot;
        ctx &lt;- getContext2D canvas
        colorSquare m.size (head s) snakeColor ctx
        case m.prev of
          Nothing -&gt; colorSquare m.size (m.mouse) mouseColor ctx
          Just pt -&gt; colorSquare m.size pt bgColor ctx
		  --make use of the fact: either we draw the mouse or erase the tail, not both, at any one step
</code></pre>
<h2 id="signal">Signal</h2>
<p>The <code>step</code> function takes an update of type <code>Point</code>, so we need to produce a <code>Signal Point</code>.</p>
<p><a href="https://pursuit.purescript.org/packages/purescript-signal/8.0.0">purescript-signal</a> contains signals from various sources, e.g. which keys are pressed and the time. We use the following functions from there:</p>
<ul>
<li><code>keyPressed :: forall e. Int -&gt; Eff (dom :: DOM | e) (Signal Boolean)</code>. (Note we need access to the DOM to get a keybord signal.) The key codes for L/U/D/R are 37, 38, 40, 39. We map them to <span class="math inline">\((-1,0), (0,-1), (0,1), (1,0)\)</span>, respectively.</li>
<li><code>every :: Time -&gt; Signal Time</code> periodically signals the time.</li>
<li><code>sampleOn :: forall a b. (Signal a) -&gt; (Signal b) -&gt; (Signal b)</code> creates a signal which yields the current value of the second signal every time the first signal yields. Usually the first signal is a periodic time signal (e.g. <code>every second</code>).</li>
</ul>
<p>Below, <code>input</code> gives a direction corresponding to the arrow key pressed every 1/20 second.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">--SIGNALS</span>
<span class="ot">inputDir ::</span> <span class="dt">Eff</span> _ (<span class="dt">Signal</span> <span class="dt">Point</span>)
inputDir <span class="fu">=</span> 
    <span class="kw">let</span> 
        f <span class="fu">=</span> \l u d r <span class="ot">-&gt;</span> ifs [<span class="dt">Tuple</span> l <span class="fu">$</span> <span class="dt">Tuple</span> (<span class="fu">-</span><span class="dv">1</span>) <span class="dv">0</span>, <span class="dt">Tuple</span> u <span class="fu">$</span> <span class="dt">Tuple</span> <span class="dv">0</span> (<span class="fu">-</span><span class="dv">1</span>), <span class="dt">Tuple</span> d <span class="fu">$</span> <span class="dt">Tuple</span> <span class="dv">0</span> <span class="dv">1</span>, <span class="dt">Tuple</span> r <span class="fu">$</span> <span class="dt">Tuple</span> <span class="dv">1</span> <span class="dv">0</span>] <span class="fu">$</span> <span class="dt">Tuple</span> <span class="dv">0</span> <span class="dv">0</span>
<span class="co">--note y goes DOWN</span>
    <span class="kw">in</span>
      map4 f <span class="fu">&lt;$&gt;</span> (keyPressed <span class="dv">37</span>) <span class="fu">&lt;*&gt;</span> (keyPressed <span class="dv">38</span>) <span class="fu">&lt;*&gt;</span> (keyPressed <span class="dv">40</span>) <span class="fu">&lt;*&gt;</span> (keyPressed <span class="dv">39</span>)

<span class="ot">input ::</span> <span class="dt">Eff</span> _ (<span class="dt">Signal</span> <span class="dt">Point</span>)
input <span class="fu">=</span> sampleOn (fps <span class="fl">20.0</span>) <span class="fu">&lt;$&gt;</span> inputDir

<span class="ot">fps ::</span> <span class="dt">Time</span> <span class="ot">-&gt;</span> <span class="dt">Signal</span> <span class="dt">Time</span>
fps x <span class="fu">=</span> every (second<span class="fu">/</span>x)

<span class="ot">ifs::</span> forall a<span class="fu">.</span> <span class="dt">Array</span> (<span class="dt">Tuple</span> <span class="dt">Boolean</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a
ifs li z <span class="fu">=</span> <span class="kw">case</span> uncons li <span class="kw">of</span>
             <span class="dt">Just</span> {head <span class="fu">:</span> <span class="dt">Tuple</span> b y, tail <span class="fu">:</span> tl} <span class="ot">-&gt;</span> <span class="kw">if</span> b <span class="kw">then</span> y <span class="kw">else</span> ifs tl z
             <span class="dt">Nothing</span>         <span class="ot">-&gt;</span> z </code></pre></div>
<p>At this point, we can slap in a <code>main</code> and then compile.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">Eff</span> _ <span class="dt">Unit</span>
main <span class="fu">=</span>
    void <span class="fu">$</span> unsafePartial <span class="kw">do</span>
      <span class="co">-- create the signal</span>
      dirSignal <span class="ot">&lt;-</span> input
      game <span class="ot">&lt;-</span> foldp step start dirSignal
      runSignal (map render game)</code></pre></div>
<p>But we don’t have randomness yet.</p>
<h2 id="adding-randomness">Adding randomness</h2>
<p>How do we model randomness in a purely functional program?</p>
<p>We need to add randomness as an effect.</p>
<h3 id="something-that-doesnt-work">Something that doesn’t work</h3>
<p>The initialization and step functions need randomness, so we can try to rewrite the functions so they have the following type signatures:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">init<span class="ot"> ::</span> <span class="dt">Eff</span> (<span class="ot">random::</span> <span class="dt">RANDOM</span>) <span class="dt">Model</span> 

<span class="ot">step ::</span> forall e<span class="fu">.</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Eff</span> (<span class="ot">random::</span><span class="dt">RANDOM</span> <span class="fu">|</span> e) <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Eff</span> (<span class="ot">random::</span><span class="dt">RANDOM</span> <span class="fu">|</span> e) <span class="dt">Model</span>

<span class="ot">render ::</span> <span class="dt">Eff</span> (<span class="ot">random::</span> <span class="dt">RANDOM</span>) <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Eff</span> _ <span class="dt">Unit</span> 

<span class="ot">input ::</span> <span class="dt">Eff</span> _ (<span class="dt">Signal</span> <span class="dt">Update</span>)

<span class="co">-- Putting it all together</span>
<span class="ot">main ::</span> <span class="dt">Eff</span> _ <span class="dt">Unit</span>
main <span class="fu">=</span> 
    void <span class="kw">do</span>
      startGame <span class="ot">&lt;-</span> init
      signal <span class="ot">&lt;-</span> input
	  <span class="co">-- game :: Signal Model</span>
      game <span class="ot">&lt;-</span> foldp step startGame signal
	  <span class="co">-- map :: (a -&gt; b) -&gt; f a -&gt; f b</span>
	  <span class="co">--        (Model -&gt; Eff _ Unit) -&gt; Signal Model -&gt; Signal (Eff _ Unit)</span>
      runSignal (map render game)</code></pre></div>
<p>If you try this you will get very weird behavior: the mouse will jump all over the place! My best explanation for this is that the effects are compiled in un-executed form in the signal, and at each step, the effects are executed <em>starting from the beginning</em>. Not only does this mean that the random numbers generated are different, it means that the the program will run slower and slower. See a discussion <a href="https://groups.google.com/forum/#!msg/purescript/CeVEETR0U3U/oacKYPmXAwAJ">here</a>.</p>
<h3 id="using-a-generator">Using a generator</h3>
<p>The standard way to do this is to include a <code>Seed</code> in the state, and whenever we need randomness, use the seed to generate a random number and a new seed, and update the seed. We can add a field for <code>seed</code> in <code>Model</code>…</p>
<p>But this is clunky, and just the kind of thing that monads make easier to express! This sounds like a <code>State Seed</code> and in fact, the <a href="https://pursuit.purescript.org/packages/purescript-quickcheck/3.0.0/docs/Test.QuickCheck.Gen">Gen</a> monad is (basically) just this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">type</span> <span class="dt">GenState</span> <span class="fu">=</span> {<span class="ot"> newSeed ::</span> <span class="dt">Seed</span>,<span class="ot"> size ::</span> <span class="dt">Size</span> }

<span class="kw">newtype</span> <span class="dt">Gen</span> a <span class="fu">=</span> <span class="dt">Gen</span> (<span class="dt">StateT</span> <span class="dt">GenState</span> <span class="dt">Identity</span> a)</code></pre></div>
<p>Our step function will no longer be <code>a -&gt; b -&gt; b</code>, but will draw on randomness, so will take the form <code>a -&gt; b -&gt; Gen b</code>. We now replace</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">foldp ::</span> forall a b<span class="fu">.</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> (<span class="dt">Signal</span> a) <span class="ot">-&gt;</span> (<span class="dt">Signal</span> b)</code></pre></div>
<p>with the function</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">foldpR ::</span> forall a b e<span class="fu">.</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Gen</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> (<span class="dt">Signal</span> a) <span class="ot">-&gt;</span> <span class="dt">Eff</span> (<span class="ot">random ::</span> <span class="dt">RANDOM</span> <span class="fu">|</span> e) (<span class="dt">Signal</span> b)</code></pre></div>
<p>This is very reusable, and will make anything else we write with randomness painless.</p>
<p>For this, we need a bit of footwork. Behind the scenes, we do as we said before: a function <code>f :: a -&gt; b -&gt; Gen b</code> is the same as a function <code>f' :: a -&gt; (b, GenState) -&gt; (b, GenState)</code>. We unravel <code>f</code>, and <code>foldp</code> using this <code>f'</code> as the step function and an initial seed. For sake of reusability, I’ve put <code>foldpR</code> in a separate module, in more generality than necessary, <a href="https://github.com/holdenlee/purescript-games/blob/master/src/SignalM.purs">here</a>; add <code>import SignalM</code> to <code>Snake</code>.</p>
<p>The function <code>step :: Partial =&gt; Point -&gt; Model -&gt; Model</code> is now <code>step :: Partial =&gt; Point -&gt; Model -&gt; Gen Model</code>. In the branch of the <code>if</code> statement where the snake eats the mouse, we keep generating points within the dimensions until the point is not part of the snake. Note that PureScript uses <code>pure</code> instead of <code>return</code>. We add <code>pure</code> to the other branches (not shown).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">  <span class="kw">do</span> 
    newMouse <span class="ot">&lt;-</span> untilM (\pt <span class="ot">-&gt;</span> not (pt <span class="ot">`elem`</span> s <span class="fu">||</span> pt <span class="fu">==</span> hd)) (randomPoint m<span class="fu">.</span>xd m<span class="fu">.</span>yd)
    pure <span class="fu">$</span> m { snake <span class="fu">=</span> hd <span class="fu">:</span> s
             , mouse <span class="fu">=</span> newMouse
             , dir <span class="fu">=</span> d
             , prev <span class="fu">=</span> <span class="dt">Nothing</span> <span class="co">-- snake grows; nothing is deleted</span>
             }</code></pre></div>
<p>The auxiliary functions here are (<code>untilM</code> being the monadic analogue of “repeat until”)</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">untilM ::</span> forall m a<span class="fu">.</span> (<span class="dt">Monad</span> m) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Boolean</span>) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> m a
untilM cond ma <span class="fu">=</span> 
    <span class="kw">do</span> 
      x <span class="ot">&lt;-</span> ma
      <span class="kw">if</span> cond x <span class="kw">then</span> pure x <span class="kw">else</span> untilM cond ma

<span class="ot">randomPoint ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Gen</span> <span class="dt">Point</span>
randomPoint xmax ymax <span class="fu">=</span> 
    <span class="kw">do</span>
      x <span class="ot">&lt;-</span> chooseInt <span class="dv">1</span> xmax
      y <span class="ot">&lt;-</span> chooseInt <span class="dv">1</span> ymax
      pure <span class="fu">$</span> <span class="dt">Tuple</span> x y</code></pre></div>
<p>We also similarly incorporate randomness in the starting model by replacing <code>start :: Model</code> with <code>init :: forall e. Eff (random::RANDOM | e) Model</code>. The final <code>main</code> looks like</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">main ::</span> <span class="dt">Eff</span> _ <span class="dt">Unit</span>
main <span class="fu">=</span> 
    void <span class="fu">$</span> unsafePartial <span class="kw">do</span>
      <span class="co">--draw the board</span>
      gameStart <span class="ot">&lt;-</span> init
      render gameStart
      <span class="co">-- create the signals</span>
      dirSignal <span class="ot">&lt;-</span> input
      <span class="co">-- need to be in effect monad in order to get a keyboard signal</span>
      game <span class="ot">&lt;-</span> foldpR step gameStart dirSignal
      runSignal (map renderStep game)</code></pre></div>
<p>See all the code <a href="https://github.com/holdenlee/purescript-games/blob/master/src/Snake.purs">here</a>.</p>
<p>The version I linked to has a few extra lines of code so that pressing SPACE restarts the game; the additions are in <a href="https://github.com/holdenlee/purescript-games/blob/master/src/SnakeS.purs">SnakeS.purs</a>, at the bottom.</p>
<h2 id="building">Building</h2>
<p>To build the project, run</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">mkdir</span> dist
<span class="ex">pulp</span> build
<span class="ex">pulp</span> browserify -m Snake/index.js <span class="op">&gt;&gt;</span> dist/Snake.js</code></pre></div>
<p>Browserify creates a javascript file with all the javascript libraries included. We need a html file to host the javascript. Create <code>html/index.html</code> with a canvas of the appropriate dimensions:</p>
<div class="sourceCode"><pre class="sourceCode html"><code class="sourceCode html"><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span>
<span class="kw">&lt;html&gt;</span>
  <span class="kw">&lt;head&gt;</span>
    <span class="kw">&lt;title&gt;</span>Snake<span class="kw">&lt;/title&gt;</span>
  <span class="kw">&lt;/head&gt;</span>
  <span class="kw">&lt;body&gt;</span>
    <span class="kw">&lt;canvas</span><span class="ot"> id=</span><span class="st">&quot;canvas&quot;</span><span class="ot"> width=</span><span class="st">&quot;270&quot;</span><span class="ot"> height=</span><span class="st">&quot;270&quot;</span><span class="ot"> style=</span><span class="st">&quot;border: 1px solid black; display: block; margin: auto;&quot;</span><span class="kw">&gt;&lt;/canvas&gt;</span>
    <span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;text/javascript&quot;</span><span class="ot"> src=</span><span class="st">&quot;../dist/Snake.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span>
  <span class="kw">&lt;/body&gt;</span>
<span class="kw">&lt;/html&gt;</span></code></pre></div>
<p>Now open the file and play!</p>
<!--
# Exercises

* Add a tab for score.
* Add a start screen. Press SPACE to begin. When the game ends, display "GAME OVER, SPACE to play again".
* Add sounds whenever the snake eats a mouse.
* Change the amount that the snake lengthens each time.
* Allow the user to adjust the speed and the lengthening rate.
-->
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>The PureScript signal library is very similar to the former Elm signal library. Note that Elm no longer uses signals.<a href="#fnref1">↩</a></p></li>
</ol>
</section>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Thoughts and links, 10/2016</title>
    <link href="http://holdenlee.github.io/blog/posts/monthly_summaries/10-16.html" />
    <id>http://holdenlee.github.io/blog/posts/monthly_summaries/10-16.html</id>
    <published>2016-11-04T00:00:00Z</published>
    <updated>2016-11-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Thoughts and links, 10/2016</h1>
    </div>
    <div class="info">
       <div class="subtitle"><p>And don't forget to (trade your) vote</p></div> 
       
        <p>Posted: 2016-11-04 
          , Modified: 2016-11-04 
	</p>
      
       <p>Tags: <a href="/tags/links.html">links</a>, <a href="/tags/politics.html">politics</a>, <a href="/tags/election.html">election</a></p> 
    </div>
    
  </div>
  <!--/div-->

  

  <div class="blog-main">
    <p>First, an important announcement.</p>
<h2 id="trade-your-vote">Trade your vote!</h2>
<ul>
<li><a href="http://nevertrump.trimian.com/">#NeverTrump</a></li>
<li><a href="https://voteswap.us/">voteswap.us</a></li>
</ul>
<p>The margin between Hillary Clinton and Donald Trump is dangerously close. Third-party candidates, with 5+% in polls, have a large number of votes which could change the outcome in swing states.</p>
<p>In 2000, Bush won the national election with a margin of 537 votes in Florida while Nader received 97,488 votes in Florida - far more than enough to tilt the election. Forseeing a close election, “NaderTrading” attempted to trade votes between Ralph Nader supporters in swing states such as Florida with Al Gore supporters in safe states, “teleporting” votes for Al Gore to the states where it would matter, while ensuring that Ralph Nader would receive as many votes as he would otherwise to have a chance of qualifying for federal funds.</p>
<p>voteswap2000.com could have changed the outcome of history - but was shut down by California’s attorney general; with only weeks left until the election, there was no time to appeal.</p>
<p>Let’s learn from history. (The point here is not to endorse Al Gore, but to illustrate of how effective vote-swapping can be.) The race is similarly close but we have new tools at our disposal:</p>
<ol type="1">
<li>The Ninth Circuit Court of Appeals ruled in Porter v. Bowen (2007) that vote-swapping is protected by first-amendment rights.</li>
<li>We have SOCIAL MEDIA.</li>
</ol>
<p>Hillary Clinton supporters in safe states swapping votes with anti-Trump third-party supporters in battleground states can potentially change history. If you are in either category please sign up at one of the sites.</p>
<p>Thanks, and please share.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Scott Aaronson’s <a href="http://www.scottaaronson.com/blog/?p=2891">post</a> (with more links)</li>
<li>Scott Aaronson interviewed on Rationally Speaking, on <a href="http://rationallyspeakingpodcast.org/show/rs-171-scott-aaronson-on-the-ethics-and-strategy-of-vote-tra.html">“The ethics and strategy of vote trading”</a></li>
<li><a href="http://expost.padm.us/trumptrumper">FAQ</a></li>
</ul>
<h2 id="back-to-our-regularly-scheduled-programming">Back to our regularly scheduled programming…</h2>
<p>See all the links for this month for <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232016-10">October</a>. (See <a href="4-16.html">April’s post</a> for an explanation of the organization.) Here are some highlights.</p>
<ul>
<li>Podcasts
<ul>
<li>Freakonomics
<ul>
<li><a href="http://freakonomics.com/podcast/future-probably-isnt-scary-think/">The Future (Probably) Isn’t as Scary as You Think</a></li>
<li><a href="http://freakonomics.com/podcast/gender-barriers/">What are gender barriers made of?</a>
<ul>
<li>There is a hiring bias because e.g. assertiveness not seen in positive light in women. Girls guess less on the SAT.</li>
</ul></li>
<li><a href="http://freakonomics.com/podcast/in-praise-of-incrementalism/">In Praise of Incrementalism</a></li>
</ul></li>
<li>Love + Radio: <a href="http://loveandradio.org/2016/09/a-girl-of-ivory/">A girl of ivory</a> Hierarchical polyamory, inorganic lovers.</li>
<li>Radio diaries: <a href="http://www.radiodiaries.org/the-working-tapes/">The Working Tapes</a>: A collection of interviews of working men and women across the country</li>
<li>Radiolab: <a href="http://www.radiolab.org/story/alpha-gal/">Alpha Gal</a>: A tick bite can make you allergic to red meat.</li>
<li>Review the Future: <a href="http://reviewthefuture.com/?p=682">X008: How to train your personal AI and Mailbag</a>, <a href="https://workflowy.com/s/wL3CyEXpHY#/03164fd88951">quick summary</a></li>
<li>Surprisingly Awesome: <a href="https://gimletmedia.com/episode/21-postal-addresses/">Postal Addresses</a>: Attempts to modernize the postal system in various countries. The intricacies of delivering mail in Mongolia.</li>
<li>The Truth: <a href="http://www.thetruthpodcast.com/story/cor-wrong-ct">Cor-wrong-ct!</a> A radio drama mixtape.</li>
<li>This American Life
<ul>
<li><a href="http://www.thisamericanlife.org/radio-archives/episode/597/one-last-thing-before-i-go">597 One last thing before I go</a>: A phone booth to talk to the dead</li>
<li><a href="https://www.thisamericanlife.org/radio-archives/episode/598/my-undesirable-talent">598 My Undesirable Talent</a>: How a law-abiding citizen naturally became a Spiderman-like burglar</li>
</ul></li>
<li>The Orbiting Human Circus <a href="http://orbitinghumancircus.com/">premiere</a> from the creators of Welcome to Night Vale.</li>
<li>I’ve been expanding my repertoire of podcasts recently, mainly from <a href="https://www.radiotopia.fm/">Radiotopia</a> and <a href="https://gimletmedia.com/">Gimlet media</a>. Some cool ones are <a href="http://songexploder.net/">Song exploder</a> and <a href="https://gimletmedia.com/show/sampler/">Sampler</a> (a podcast sampler!).</li>
</ul></li>
<li>Readings from the science fiction club
<ul>
<li><a href="http://clarkesworldmagazine.com/kritzer_01_15/">Cat pictures please</a></li>
<li><a href="http://clarkesworldmagazine.com/shoemaker_08_15/">Today I am Paul</a></li>
<li><a href="http://lesswrong.com/lw/xu/failed_utopia_42/">Failed utopia #4.2</a></li>
<li><a href="http://www.yudkowsky.net/other/fiction/npc">Non-player character</a></li>
</ul></li>
<li>At Princeton
<ul>
<li>Robert Krulwich interviewed science writer <a href="http://maryroach.net/">Mary Roach</a> at Princeton. Here are <a href="https://workflowy.com/s/OPIgRoTRtM">my notes</a>.</li>
<li>Adrienne Truscott’s <a href="http://www.adriennetruscott.com/asking-for-it/">Asking for It: A One-Lady Rape about Comedy</a>.</li>
</ul></li>
<li>I am learning Esperanto! I’m following the lessons at <a href="http://lernu.net/">Lernu</a> and the podcast on <a href="http://melburno.org.au/3ZZZradio/">3ZZZ</a>.</li>
<li><a href="https://www.goodreads.com/book/show/101869.The_Atrocity_Archives?ac=1&amp;from_search=true">The Atrocity Archives (The Laundry Files)</a>: Funny horror/spy/hacker adventure story in a world where advanced math can call up Cthulhu-like demons and also, there is lots of paperwork.</li>
<li><a href="http://www.hbo.com/westworld">Westworld (TV series)</a>: New science fiction/Western TV series</li>
</ul>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Links and thoughts, 8-9/2016</title>
    <link href="http://holdenlee.github.io/blog/posts/monthly_summaries/9-16.html" />
    <id>http://holdenlee.github.io/blog/posts/monthly_summaries/9-16.html</id>
    <published>2016-10-03T00:00:00Z</published>
    <updated>2016-10-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Links and thoughts, 8-9/2016</h1>
    </div>
    <div class="info">
       <div class="subtitle"><p>With lots of podcasts</p></div> 
       
        <p>Posted: 2016-10-03 
          , Modified: 2016-10-03 
	</p>
      
       <p>Tags: <a href="/tags/links.html">links</a></p> 
    </div>
    
  </div>
  <!--/div-->

  

  <div class="blog-main">
    <p>See all the links for this month for <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232016-8">August</a> and <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232016-9">September</a>. (See <a href="4-16.html">April’s post</a> for an explanation of the organization.) Here are some highlights.</p>
<ul>
<li>Podcasts
<ul>
<li><a href="http://freakonomics.com/podcast/uber-economists-dream/">Why Uber is an Economist’s dream (Freakonomics)</a></li>
<li><a href="http://www.npr.org/podcasts/510307/invisibilia">Invisibilia</a>, about the invisible forces that control human behavior - ideas, beliefs, assumptions and emotions. I started listening to it this month and really like it.
<ul>
<li><a href="http://www.npr.org/programs/invisibilia/485603559/flip-the-script?showDate=2016-07-15">7/15/16 Flip the script</a>: Noncomplementary behavior - a peaceful solution to terrorism</li>
<li><a href="http://www.npr.org/programs/invisibilia/485605882/the-secret-emotional-life-of-clothes?showDate=2016-07-22">7/22/16 The secret emotional life of clothes</a>: A formative experience with the power of clothes in a Nazi concentration camp</li>
</ul></li>
<li>Radiolab
<ul>
<li><a href="http://www.radiolab.org/story/invisible-girl/">The Girl Who Doesn’t Exist</a>: Attempting to join society without a birth certificate.</li>
<li><a href="http://www.thisamericanlife.org/radio-archives/episode/596/becoming-a-badger">596 Becoming a badger</a>: The grass smells different after rain, like switching the music to Mozart.</li>
</ul></li>
<li>Rationally speaking
<ul>
<li><a href="http://rationallyspeakingpodcast.org/show/rs-167-samuel-arbesman-on-why-technology-is-becoming-too-com.html">167 Samuel Arbesman on “Why technology is becoming too complex”</a></li>
<li><a href="http://rationallyspeakingpodcast.org/show/rs-168-don-moore-on-overconfidence.html">168 Dan Moore on “Overconfidence”</a></li>
</ul></li>
<li><a href="https://gimletmedia.com/episode/74-making-friends/">Making friends (Reply All)</a>: On tulpas, intelligent companions imagined into existence. See also <a href="https://www.reddit.com/r/Tulpas/">/r/Tulpas</a>.</li>
<li><a href="http://reviewthefuture.com/?p=665">Can capitalism survive an “economic singularity?” (Review the future)</a>: Transitioning from a work-based economy and culture, universal basic income, speciation into the gods and the useless.</li>
<li>Strangers
<ul>
<li><a href="http://www.storycentral.org/love-hurts-two-years-later/">Love hurts - Two years later</a></li>
<li><a href="https://soundcloud.com/kcrwstrangers/matjames-and-tyler-flee-flood-float">Matjames and Tyler: Free, Flood, Float</a></li>
</ul></li>
<li>The Allusionist, on deciphering ancient languages
<ul>
<li><a href="http://www.theallusionist.org/allusionist/rosetta">42 The key part I: Rosetta</a></li>
<li><a href="http://www.theallusionist.org/allusionist/vestiges">43 The key part II: Vestiges</a>: monolingualism is a byproduct of the nation-state</li>
</ul></li>
<li><a href="http://thememorypalace.us/2012/12/dreamland/">Dreamland (The Memory Palace)</a></li>
<li><a href="http://www.writingexcuses.com/">Writing Excuses</a> - a podcast that teaches fiction writing
<ul>
<li><a href="http://www.writingexcuses.com/2016/09/11/11-37-casting-your-book-with-gama-martinez/">11.37 Casting your book, with Gama Martinez</a></li>
</ul></li>
<li><a href="http://99percentinvisible.org/episode/making-up-ground/">Making up ground (99% invisible)</a>: San Francisco built from ships; Singapore stealing sand; islands for the rich</li>
</ul></li>
<li><a href="http://david-peter.de/cube-composer/">Cube composer</a>: A puzzle game inspired by functional programming</li>
<li><a href="http://www.lifehack.org/articles/productivity/100-incredible-things-learned-watching-70-hours-ted-talks-last-week.html">100 incredible things I learned watching TED talks</a>
<ul>
<li><a href="http://www.ted.com/talks/eric_x_li_a_tale_of_two_political_systems/transcript?language=en#t-971005">63. There may be another way to run a successful, modern economy: the Chinese way</a> <a href="http://scrible.com/s/m7RS4">h</a></li>
<li><a href="http://www.ted.com/talks/eli_pariser_beware_online_filter_bubbles">74. Since more and more websites are trying to tailor their content to you, you may get caught up in a digital “filter bubble” and not get “exposed to information that could challenge or broaden your worldview”.</a> <a href="http://scrible.com/s/kfBS4">h</a></li>
</ul></li>
<li><p><a href="http://degoes.net/articles/amoralism-101">Amoralism 101 (John A De Goes)</a> <a href="http://scrible.com/s/4Awm6">h</a></p>
<blockquote>
<p>Personally, I believe that’s why moral language developed: a way to extract something you want from others by talking about your desires as if they were objective facts of the physical universe.</p>
</blockquote></li>
<li><a href="http://malcolmocean.com/2014/12/hugging-strangers-in-airports/">Hugging strangers in airports (Malcolm Ocean)</a> <a href="http://scrible.com/s/0IMCm">h</a></li>
<li><a href="https://usamo.wordpress.com/2016/08/13/against-the-research-vs-olympiads-mantra/">Against the research vs. olympiads mantra (Power Overwhelming)</a> <a href="http://scrible.com/s/kcwg6">h</a></li>
<li><a href="https://secularsolstice.com/2016/08/23/redwood-ritual-dust-in-the-wind/">Redwood ritual: dust in the wind (Secular Solstice)</a></li>
<li>Slatestarcodex
<ul>
<li><a href="http://slatestarcodex.com/2013/06/09/all-debates-are-bravery-debates/">All debates are bravery debates</a> <a href="http://scrible.com/s/mcMg6">h</a></li>
<li><a href="http://slatestarcodex.com/2015/01/25/a-philosopher-walks-into-a-coffee-shop/">A philosopher walks into a coffee shop</a></li>
</ul></li>
<li><a href="https://thingofthings.wordpress.com/2016/08/26/heteronormativity-hurts-straight-people-too/">Heteronormativity hurts straight people too (Thing of things)</a></li>
<li><a href="https://www.quantamagazine.org/20160712-hyperuniformity-found-in-birds-math-and-physics/">A Bird’s-Eye View of Nature’s Hidden Order (Quanta)</a></li>
<li><a href="https://www.math.brown.edu/~res/farm.pdf">Life on the infinite farm</a></li>
<li>Science fiction short stories
<ul>
<li><a href="http://hell.pl/szymon/Baen/The%20best%20of%20Jim%20Baens%20Universe/Vol%201%20Num%201/1932093001__17.htm">Light of other days</a></li>
<li><a href="http://web.archive.org/web/20080718084442/http://lucis.net/stuff/clarke/star_clarke.html">The Star, Arthur Clarke</a></li>
</ul></li>
<li>Writing
<ul>
<li>Brandon Sanderson’s 3 laws
<ul>
<li><a href="http://brandonsanderson.com/sandersons-first-law/">1</a> <a href="http://scrible.com/s/0IM0C">h</a></li>
<li><a href="http://brandonsanderson.com/sandersons-second-law/">2</a> <a href="http://scrible.com/s/2IM0C">h</a></li>
<li><a href="http://brandonsanderson.com/sandersons-third-law-of-magic/">3</a> <a href="http://scrible.com/s/04w2C">h</a></li>
</ul></li>
<li><a href="https://www.reddit.com/r/writingprompts">Writing prompts reddit</a>
<ul>
<li><a href="https://www.reddit.com/r/WritingPrompts/comments/4xzz71/pi_you_swerve_to_avoid_a_squirrel_unknown_to_you/">Squirrel magic</a></li>
<li><a href="https://www.reddit.com/r/WritingPrompts/comments/4y378t/wp_ever_since_you_were_little_you_could_read/">Ever since you were little you could read minds. You mastered it through the years, but one day you’re with your SO and you hear a second voice in their head.</a></li>
</ul></li>
</ul></li>
<li>Books
<ul>
<li><a href="https://www.goodreads.com/book/show/37380.The_Heart_is_a_Lonely_Hunter">The Heart is a Lonely Hunter, Carson McCullers</a>: McCullers gets in the head of the characters in a natural/free-flow way, so it’s easy to resonate with their hopes/fear/anger/etc.; she weaves their perspectives/lives together very well into a vibrant world. It feels very in touch with humanity. A lot on how people connect/don’t connect/hang their hearts on each other. People are lonely. End is sad, makes me think.</li>
<li>I’m continuing to read <a href="https://www.goodreads.com/book/show/109588.The_Great_Conversation?ac=1&amp;from_search=true">The Great Conversation: A historical introduction to philosophy</a>. <a href="https://workflowy.com/s/wL3CyEXpHY#/83fe67c598f6">Notes</a>.</li>
</ul></li>
</ul>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>
<entry>
    <title>Links and thoughts, 6-7/2016</title>
    <link href="http://holdenlee.github.io/blog/posts/monthly_summaries/7-16.html" />
    <id>http://holdenlee.github.io/blog/posts/monthly_summaries/7-16.html</id>
    <published>2016-08-12T00:00:00Z</published>
    <updated>2016-08-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="container">
  <div id="content">
    <div class="page header">
      <h1>Links and thoughts, 6-7/2016</h1>
    </div>
    <div class="info">
       <div class="subtitle"><p>Functional programming for the masses, rationalist and science fiction, fungi</p></div> 
       
        <p>Posted: 2016-08-12 
          , Modified: 2016-08-12 
	</p>
      
       <p>Tags: <a href="/tags/links.html">links</a></p> 
    </div>
    
  </div>
  <!--/div-->

  

  <div class="blog-main">
    <p>See all the links for this month for <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232016-6">June</a> and <a href="https://workflowy.com/s/wL3CyEXpHY#/d1a52d188a8f?q=%232016-7">July</a>. (See <a href="4-16.html">April’s post</a> for an explanation of the organization.) Here are some highlights.</p>
<ul>
<li>Programming: Some posts about bringing functional programming to a broader audience.
<ul>
<li><a href="https://cdsmith.wordpress.com/2016/05/22/codeworlds-big-decisions/">Codeworld’s big decisions</a> <a href="http://scrible.com/s/gDB24">h</a>: C.D. Smith collects lessons learned from years of teaching functional programming to middle school students. He describes how he modified Haskell to make a consciously-designed, beginner-friendly “Codeworld”. The resemblance of functional programming to mathematics means it can be used to teach mathematics more effectively—students get to test their intuitions about functions with immediate feedback.</li>
<li><a href="http://elm-lang.org/blog/farewell-to-frp">Elm: Farewell to FRP</a>: The Elm programming language has changed a lot from 0.16 to 0.17.
<ul>
<li>Evan Czaplicki explains his design decisions in <a href="http://www.elmbark.com/2016/03/16/mainstream-elm-user-focused-design">making Elm more mainstream</a>. A large part is the focus on <a href="http://guide.elm-lang.org/interop/">interop</a>.</li>
</ul></li>
</ul></li>
<li>Art from 4-D objects:
<ul>
<li>I went to a talk by <a href="http://www.segerman.org/">Henry Segerman</a> where he talked about making sculptures of 4-dimensional objects.</li>
<li><a href="http://hypernom.com/">Hypernom</a></li>
<li><a href="http://monkeys.hypernom.com/">Quaternion monkeys</a></li>
</ul></li>
<li><a href="http://www.5lovelanguages.com/">5 love languages</a>: Understand the different styles people have of expressing and interpreting love.</li>
<li><p>Scott Aaronson answers the call of <a href="http://www.scottaaronson.com/blog/?p=2777">Daddy, why didn’t you blog about Trump?</a> <a href="http://scrible.com/s/ifRw4">h</a></p>
<blockquote>
<p>I think people support Trump for the same reason why second-graders support the class clown who calls the teacher a fart-brain to her face. It’s not that the class literally agrees that the teacher’s cranium is filled with intestinal gases, or considers that an important question to raise. It’s simply that the clown had the guts to stand up to this scolding authority figure who presumes to tell the class every day what they are and aren’t allowed to think.</p>
</blockquote></li>
<li><a href="https://www.technologyreview.com/s/602025/how-vector-space-mathematics-reveals-the-hidden-sexism-in-language/">How vector space mathematics reveals the hidden sexism in language</a></li>
<li>Fungi
<ul>
<li><a href="http://www.thisiscolossal.com/2016/07/steve-axford-macro-mushrooms/?utm_source=feedly&amp;utm_medium=webfeeds">Photos of fungi</a></li>
<li><a href="http://www.radiolab.org/story/from-tree-to-shining-tree/">From tree to shining tree (Radiolab)</a>: Fungi form a vast underground trade and communications network for trees in the forest (Avatar, anyone?).</li>
</ul></li>
<li>Rationalist fiction
<ul>
<li><a href="http://lesswrong.com/lw/3m/rationalist_fiction/">Elizier Yudkowsky on rationalist fiction</a></li>
<li><a href="http://yudkowsky.tumblr.com/writing">How to write intelligent characters</a></li>
<li><a href="http://slatestarcodex.com/2015/10/15/it-was-you-who-made-my-blue-eyes-blue/">It was you who made my blue eyes blue (SlateStarCodex)</a>: A story based on the classic blue-eyed islander puzzle.</li>
</ul></li>
<li>Books: I’ve been reading a lot of science fiction lately.
<ul>
<li><a href="https://www.goodreads.com/book/show/77566.Hyperion">Hyperion, Dan Simmons</a></li>
<li><a href="https://www.goodreads.com/book/show/12364440-the-world-of-null-a">The world of Null-A, A.E. van Vogt</a> (Recommended from the “rationalist fiction” post above)</li>
<li><a href="https://www.goodreads.com/book/show/226004.A_Deepness_in_the_Sky">A deepness in the sky, Vernor Vinge</a>: My favorite in this batch of books.</li>
<li><a href="https://www.goodreads.com/book/show/18630.The_Player_of_Games">The player of games, Ian Banks</a></li>
<li><a href="https://www.goodreads.com/book/show/242472.The_Black_Swan">The black swan: the impact of the highly improbable, Nassim Taleb</a></li>
<li><a href="https://www.goodreads.com/book/show/26831944-the-age-of-em?ac=1&amp;from_search=true">The Age of Em, Robin Hanson</a>: Extensively thought-out predictions about a future world with emulated minds. If you don’t want to read the whole book, you can listen to a Review the Future <a href="http://reviewthefuture.com/?p=628">podcast episode on the book</a>. <a href="https://workflowy.com/#/63d84ca41913">Notes in progress</a>.</li>
</ul></li>
</ul>

  </div>

    

    <!-- Extension : Sharing buttons @ www.sharethis.com -->
    <span class='st_facebook_large' displayText='Facebook'></span>
    <span class='st_twitter_large' displayText='Tweet'></span>
    <span class='st_googleplus_large' displayText='Google +'></span>
    <span class='st_reddit_large' displayText='Reddit'></span>
    <span class='st__large' displayText=''></span>

    <div id="disqus_thread"></div>
    


  
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  
</div>
]]></summary>
</entry>

</feed>
